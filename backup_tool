#!/bin/sh

#here we create some constants.
SRC=/
SNAP=/snapshots
FORMAT="%Y-%m-%d-%H-%M"
TODAY=$(date +$FORMAT)
EXCLUDE=/etc/gf_backup_tool/exclude_file
CONFIG=/etc/gf_backup_tool/config
declare -A CONFIG_ARRAY=([Dailly]="%d" [Weekly]="%w" [Mounthly]="%m" [Hourly]="%H")
touch /tmp/temp.txt #need to create it otherwise check() gonna complain.

init () {
    show_settings
    read -r -p "do you want to edite them? [y/N]" answer
    case $answer in
	[y]) echo 'enter your settings.ie: Dailly=3 Hourly=1 Weekly=0.';
	    read -p 'NOTICE: no quotes and first letter in cap: ' var1 var2 var3 var4;
	    change_config $0 $var1 $var2 $var3 $var4;;
	*) echo "No changes made.";
	    echo "you can change them later with sudo backup_tool --set [option]"
    esac
    echo
    echo "starting first backup."
    create
    for var in ${!CONFIG_ARRAY[@]}
    do
	sudo cp -al $SNAP/Custom/$TODAY $SNAP/$var/$TODAY
    done
    echo
    echo "starting systemctl service"
    systemctl enable --now gf_backup_tool.timer
}

remove () {
    for VAR in ${!CONFIG_ARRAY[@]}
    do
	LIMITE=$(grep $VAR $CONFIG | sed 's/.*=//')
	FOLDER=$(grep $VAR $CONFIG | sed 's/=.*//')
	DIRECTORY=$SNAP/$FOLDER
	COUNT=$(ls $DIRECTORY | wc -l)     
	while [ $COUNT -gt $LIMITE ]
	do
	    DELETE=$DIRECTORY/$(ls $DIRECTORY | head -1)
	    rm -rf $DELETE
	    COUNT=$(ls $DIRECTORY | wc -l)
	done
    done
}

check () {
    for VAR in ${!CONFIG_ARRAY[@]}
    do
	verification $VAR "${CONFIG_ARRAY[$VAR]}"
    done
    remove
}

verification () {
    #this function recives 2 arguments.
    #$1 is the key from CONFIG_ARRAY.
    #$2 is the value from CONFIG_ARRAY.
    #the first one is need to create the directory var.
    #it is also used to get the max snap for ecah directory.
    #the $2 it is used to tell to datediff what is the limite.
    #it can be days or hour or week or mounth.
    DIRECTORY=$SNAP/$1
    PREVIOUS=$(ls $DIRECTORY | tail -1)
    LIMITE=$(grep $1 $CONFIG | sed 's/.*=//')
    if [ $LIMITE -gt 0 ] && [ ! -z $PREVIOUS ] && [ $(datediff -i $FORMAT $PREVIOUS $TODAY -f $2) -ge 1 ]
	then
	    create $DIRECTORY $PREVIOUS
	elif [ $LIMITE -gt 0 ] && [ -z $PREVIOUS ]
	then
	    create $DIRECTORY
    fi
}

create () {
    #this function might get 2 arguments.
    #$1 it is the directory.
    #$2 it is the previous snapshot in that directory.
    #the second one might not exists if the directory is empty.
    #this will happen in one of this 2 cases:
    #1-this is the first time you run the package.
    #2-you changed your snapshot limite from 0 to anything above that.

    #the function works with 3 conditions:
    #1-both $1 and $2 exist.
    # in this case we copy every thing from previous snap into today one and rsync changes into it.
    #2-the directory exists but it is empty.
    #in this case we simply create a snapshot from source into today in that directory.
    #3-no argument are given.
    #this happens when the user call directly the funciton with --create argument.
    #in this case we create a snapshot in the custom directory
    if [ ! -z $1 ] && [ ! -z $2 ]
    then
	cp -al $1/$2 $1/$TODAY
	rsync -razP --delete --exclude-from="$EXCLUDE" "$SRC" "$1"/"$TODAY"
    elif [ ! -z $1 ] && [ -z $2 ]
    then
	rsync -razP --exclude-from="$EXCLUDE" "$SRC" "$1"/"$TODAY"
    else
	rsync -razP --exclude-from="$EXCLUDE" "$SRC" "$SNAP"/Custom/"$TODAY"
    fi
}



list () {
    #This function is made to display the snapshots list.

    declare -A arrVar=()

    #first we fetch each one of the directorie present into $SNAP
    for directory in $SNAP/{Custom,Mounthly,Weekly,Dailly,Hourly}
    do
	declare -a tmparr=() #creates or empty the tmp array.
	#because we empty the array inside the loop it will be fresh for each directory.
	for content in $(ls $directory)
	do
	    #add the content of ls directory into the temp array
	    tmparr+=($content)
	done
	#here we add to our arrVar.
	#as key the directory first leter (D,W,M)
	#as key the temporary array.
	arrVar+=(["${directory:11:1}"]="${tmparr[@]}")
    done
    rm /tmp/temp*
    num=1 #needed to show line number.
    for key in "${!arrVar[@]}" #we loop our array by keys this why there is a !
    do
	for val in ${arrVar[$key]} #here we loop each of the array value.
	do
	    #we store each line at the end of a temporary file.
	    $(echo "$val $key" >> /tmp/temp.txt)
	done
    done
    #we need to sort the temporary file.
    sort -r /tmp/temp.txt >> /tmp/temp1.txt
    cat /tmp/temp1.txt | while read line; do
    #now show each line of the sorted tmp file.
    #but we add a line number. the $num.
    echo "$num $line"
    #increment $num.
    ((num=num+1));done

}


show_settings () {
    echo
    echo "your settings are:"
    cat $CONFIG
}

change_config () {
    if [ "$1" != "--set" ]
    then
	for arg in $2 $3 $4 $5
	do
	    num=$(echo $arg | sed 's/.*=//')
	    target=$(echo $arg | sed 's/=.*//')
	    original=$(sed -n "/$target/s/.*=//p" $CONFIG)
	    sed -i "/$target/s/$original/$num/g" $CONFIG
	done
    else
	for arg in $2 $3 $4 $5
	do
	    num=$(echo $arg | sed 's/.*=//')
	    target=$(echo $arg | sed 's/=.*//')
	    original=$(sed -n "/$target/s/.*=//p" $CONFIG)
	    sed -i "/$target/s/$original/$num/g" $CONFIG
	done
    fi
    echo "your settings now are: "
    cat $CONFIG
}

delete () {
    list
    limite=$(cat /tmp/temp1.txt | wc -l)
    declare -A folder_array=([D]="Dailly" [W]="Weekly" [M]="Mounthly" [C]="Custom" [H]="Hourly")
    read -p "enter snapshot number to delete. Enter 0 to exit. " num
    case $num in
	0) echo "exiting"
	    exit 1;;
	''|*[!0-9]*) echo "ERROR: '$num' is not a valid number from the list.";
	    echo "EXITING"
	    exit ;;
	*) if [ $num -gt $limite ] || [ $num -lt 0 ]; then
	    echo "INVALIDE ENTRY:"
	    echo "must be a number between 1 and $limite"
	    echo "exiting"
	    exit 1
	fi
	    entry=$(sed "$num q;d" /tmp/temp1.txt)
	    snapshot=$(echo $entry | sed 's/ .*//')
	    folder=$(echo $entry | sed 's/.* //')
	    echo "now Deleting $SNAP/${folder_array[$folder]}/$snapshot"
	    rm -rf "$SNAP/${folder_array[$folder]}/$snapshot"
	    ;;
    esac
}

help () {
echo "$1

	--help -h  Displays this message.
	--list  displays the full snapshots list and exit.
	--check  checks if you nedd to do a new snapshots according to your preferences.
	--create  will create a new snapshot and store it under Custom.Only manual delete.
	--set [option]  sets the amount of snapshots.To set 3 dailly:sudo backup_tool --set Dailly=3 
					to set 3 dailly and 1 weekly:sudo backup_too --set Dailly=3 Weekly=1
	--init initialize the package. To be use only the first time.
	--show  show settings and exit.
	--delete  lists every snapshots and give you the option to delete any of them.

	"

}


case $@ in
    --help|-h) help "  This is the Backup_tool Help";;
    --list) list;;
    --check) check;;
    --create) create;;
    --set*) change_config $@;;
    --init) init;;
    --show) show_settings;;
    --delete) delete;;
    *) help "Error: Invalid Argument '$1' Valid Arguments are:";;
esac

exit
